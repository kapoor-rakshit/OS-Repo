//link command
A link is an entry in your file system which connects a filename to the actual bytes of data on the disk.
More than one filename can "link" to the same data.The general form of the link command is: "link filename linkname".
Our first argument is the name of the file whose data we're linking to; the second argument is the name of the new link we're creating.
 
                        link file1.txt file2.txt    //Now both file1.txt and file2.txt point to the same data on the disk:

The important thing to realize is that we did not make a copy of this data. Both filenames point to the same bytes of data on the disk.
                                                 file1         file2
                                                       \      /
                                                        [data]

Both files show the change because they share the same data on the disk. 
Changes to the data of either one of these files will change the contents of the other.
As you can see, the data stays on the disk even after the "file" (which is actually just a link to the data) is removed. 
We can still access that data as long as there is a link to it. 
This is important to know when you're removing files — "removing" a file just makes the data inaccessible by unlink-ing it.
The data still exists on the storage media, somewhere, inaccessible to the system, and that space on disk is marked as being available for future use.



//ln command

ln creates links between files.ln creates a link to file TARGET with the name LINKNAME.
If LINKNAME is omitted, a link to TARGET is created in the current directory, using the name of TARGET as the LINKNAME.
ln creates hard links by default, or symbolic links if the -s (--symbolic) option is specified. When creating hard links, each TARGET must exist.

                         
                                     Eg:-    ln -s {target-filename} {symbolic-filename}
                                                  
                                                    file1--<----------file2
                                                       \      
                                                        [data]

Symbolic links, sometimes called "soft" links, are different than "hard" links. 
Instead of linking to the data of a file, they link to another link. 
So in the example above, file2.txt points to the link file1.txt, which in turn points to the data of the file.
This has several potential benefits. For one thing, symbolic links (also called "symlinks" for short) can link to directories. 
Also, symbolic links can cross file system boundaries, so a symbolic link to data on one drive or partition can exist on another drive or partition.
if we remove file1.txt:
                          rm file1.txt

This error message might be confusing at first, because file2.txt still exists in your directory. 
It's a broken symlink, however — a symbolic link which points to something that no longer exists. 
The operating system tries to follow the symlink to the file that's supposed to be there (file1.txt), but finds nothing, and so it returns the error message.

Symbolic links are a useful way to make shortcuts to long, complicated pathnames. For instance, this command:

                        ln -s documents/work/budgets/Engineering/2014/April aprbudge

...will save us a lot of typing; now, instead of changing directory with the following command:

                        cd documents/work/budgets/Engineering/2014/April

...we can do this, instead:

                        cd aprbudge

Here are the options that can be passed to the ln command.

--backup[=CONTROL]	Use this option to additionally create a backup of each existing destination file. 
The style of backup is optionally defined by the value of CONTROL. See below for more information.

About The --backup Option

When using the --backup (or -b) option, the default file suffix for backups is '~'. You can change this, however, using the --suffix option or setting the SIMPLE_BACKUP_SUFFIX environment variable.
The CONTROL argument to the --backup option specifies the version control method. Alternatively, it can be specified by setting the VERSION_CONTROL environment variable. Here are the values to use for either one:

none, off	never make backups (even if --backup is given)

numbered, t	make numbered backups.

existing, nil	numbered if numbered backups exist, simple otherwise.

simple, never	always make simple backups.

If you use -b instead of --backup, the CONTROL method is always simple.
If you specify the -s option (which symlinks), ln ignores the -L and -P options. 
Otherwise (if you are making hard links), the last option specified controls behavior when a TARGET is a symbolic link. The default is to act as if -P was specified.




-b	This functions like --backup, but you cannot specify the CONTROL; the default style (simple) is used.

-d, -F, --directory	This option allows the superuser to attempt to hard link directories (although it will probably fail due to system restrictions, even for the superuser).

-f, --force	If the destination file or files already exist, overwrite them.

-i, --interactive	Prompt the user before overwriting destination files.

-L, --logical	Dereference TARGETs that are symbolic links. In other words, if you are trying to create a link (or a symlink) to a symlink, link to what it links to, not to the symlink itself..

-n, --no-dereference	Treat LINKNAME as a normal file if it is a symbolic link to a directory.

-P, --physical	Make hard links directly to symbolic links, rather than dereferencing them.

-r, --relative	Create symbolic links relative to link location.

-s, --symbolic	Make symbolic links instead of hard links.

-S, --suffix=SUFFIX	Use the file suffix SUFFIX rather than the default suffix "~".

-t, --target-directory=DIRECTORY	Specify the DIRECTORY in which to create the links.

-T, --no-target-directory	Always treat LINKNAME as a normal file.

-v, --verbose	Operate verbosely; print the name of each linked file.

--help	Display a help message, and exit.

--version	Display version information, and exit.



